<!DOCTYPE html>
@model UserInterface.Models.UpdatePassword

@{
    ViewData["Title"] = "User settings";
    var comments = ViewData["Comments"] as List<Core.Entities.Comments>;
    if (TempData.Peek("MessageInfo") != null)
    {
        ViewData["InfoMessage"] = TempData["MessageInfo"];
    }
    if (TempData.Peek("MessageError") != null)
    {
        ViewData["ErrorMessage"] = TempData["MessageError"];
    }
}

<h1>User settings</h1>
<h4>User settings</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Logout">
            <input type="submit" value="Logout" />
        </form>
        <form asp-action="UserSettings">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="OldPassword" class="control-label"></label>
                <input asp-for="OldPassword" class="form-control" />
                <span asp-validation-for="OldPassword" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="NewPassword" class="control-label"></label>
                <input asp-for="NewPassword" class="form-control" onchange="CheckConfirm(this)" />
                <span asp-validation-for="NewPassword" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword" class="control-label">Confirm new password</label>
                <input id="confirmNewPassword" type="password" class="form-control" onchange="CheckConfirm(this)" />
                <span id="confirmWarning" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input disabled="true" id="submitButton" type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>

        <button id="openModalButton" onclick="OpenModal()" class="btn btn-primary" data-target="myModal" data-toggle="modal">Delete account</button>

        <h4>Comments</h4>

        <div id="commentscontainer" style="background-color:#0000aa">
            @foreach (var comment in comments)
            {
            var containerId = $"{comment.Id}_container";
            <div id=@containerId style="background-color:#aa0000;margin:1rem">
                    <p>@comment.CreateDate</p>
                    <p>@comment.Comment</p>
                    <button id="@comment.Id" onclick="RemoveComment(this.id)">Remove</button>
                </div>
            }
        </div>

        <div class="modal fade" id="deleteAccountModal">
            <div class="modal-dialog modal-sm">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Delete account</h4>
                        <button type="button" class="close" data-dismiss="modal">x</button>
                    </div>
                    <div class="modal-body">
                        <p>Confirm deletion of account</p>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" onclick="RemoveUser()" class="btn btn-primary">Confirm</button>
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    function OpenModal()
    {
        $("#deleteAccountModal").modal('show');
    }

    function RemoveUser() {
        const createUrl = `@Url.Action("Index", "Home")`;
        $.ajax({
            method: "POST",
            url: '@Url.Action("RemoveUser", "Home")',
            async: true,
            success: function() {
                window.location.assign(createUrl);
            }
        });
    }

    function RemoveComment(idToRemove) {
        const createUrl = `@Url.Action("RemoveComment", "Home")?commentId=${idToRemove}`;
        $.ajax({
            method: "POST",
            url: createUrl,
            async: true,
            success: function(data, t, j) {
                const messageElement = document.getElementById('info');
                const containerId = `${idToRemove}_container`;
                document.getElementById(containerId).remove();
                messageElement.style.visibility = "visible";
                messageElement.innerHTML = data;
            },
            error: function (j, t, e) {
                const messageElement = document.getElementById('error');
                messageElement.style.visibility = "visible";
                messageElement.innerHTML = j.responseText;
            }
        });
    }

    function CheckConfirm(e) {
        let confirmElement = null;
        if (e.id === 'NewPassword') {
            confirmElement = document.getElementById('confirmNewPassword');
        }
        else if (e.id === 'confirmNewPassword') {
            confirmElement = document.getElementById('NewPassword');
        }
        if (confirmElement.value.length === 0 || e.value.length === 0) {
            const submitButton = document.getElementById('submitButton');
            submitButton.disabled = true;
            const confirmWarning = document.getElementById('confirmWarning');
            confirmWarning.innerHTML = 'Password cannot be empty.';
        }
        else if (confirmElement.value === e.value) {
            const submitButton = document.getElementById('submitButton');
            submitButton.disabled = false;
            const confirmWarning = document.getElementById('confirmWarning');
            confirmWarning.innerHTML = '';
        }
        else {
            const submitButton = document.getElementById('submitButton');
            submitButton.disabled = true;
            const confirmWarning = document.getElementById('confirmWarning');
            confirmWarning.innerHTML = 'Password doesn\'t match';
        }
    }
</script>
